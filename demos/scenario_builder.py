#!/usr/bin/env python3
# STRICTLY A SOCIAL MEDIA PLATFORM
# Intellectual Property & Artistic Inspiration
# Legal & Ethical Safeguards
"""Scenario Builder for superNova_2177

This script generates a custom set of validation entries based on
user supplied parameters and runs ``analyze_validation_integrity``
to analyze them. It can optionally save the generated scenario and
analysis results to a JSON file for later inspection.
"""

import argparse
import json
import random
from datetime import datetime, timedelta
from typing import List, Dict

from dateutil import parser as date_parser

from validation_certifier import analyze_validation_integrity


DEFAULT_SPECIALTIES = ["data_science", "statistics", "biology", "physics"]
DEFAULT_AFFILIATIONS = ["Institute_A", "Lab_B", "University_C"]


def generate_validations(
    count: int,
    start_time: datetime,
    interval_minutes: int,
    score_min: float,
    score_max: float,
) -> List[Dict[str, object]]:
    """Create a list of synthetic validations."""
    validations = []
    for i in range(count):
        timestamp = start_time + timedelta(minutes=i * interval_minutes)
        validations.append(
            {
                "validator_id": f"validator_{i+1}",
                "score": round(random.uniform(score_min, score_max), 2),
                "confidence": round(random.uniform(0.6, 0.9), 2),
                "signal_strength": round(random.uniform(0.5, 0.9), 2),
                "note": "Generated by scenario_builder",
                "timestamp": timestamp.isoformat(),
                "specialty": random.choice(DEFAULT_SPECIALTIES),
                "affiliation": random.choice(DEFAULT_AFFILIATIONS),
            }
        )
    return validations


def main() -> None:
    parser = argparse.ArgumentParser(description="Build and analyze a custom validation scenario")
    parser.add_argument("--validators", type=int, default=5, help="Number of validators to generate")
    parser.add_argument(
        "--start",
        type=str,
        default=datetime.utcnow().isoformat(),
        help="ISO timestamp for the first validation",
    )
    parser.add_argument(
        "--interval",
        type=int,
        default=60,
        help="Minutes between each validation submission",
    )
    parser.add_argument("--score-min", type=float, default=0.6, help="Minimum score value")
    parser.add_argument("--score-max", type=float, default=0.9, help="Maximum score value")
    parser.add_argument(
        "--output",
        type=str,
        default=None,
        help="Optional JSON file to write scenario and analysis",
    )

    args = parser.parse_args()

    start_time = date_parser.isoparse(args.start)
    validations = generate_validations(
        args.validators,
        start_time,
        args.interval,
        args.score_min,
        args.score_max,
    )

    result = analyze_validation_integrity(validations)

    print(json.dumps(result, indent=2))

    if args.output:
        with open(args.output, "w") as f:
            json.dump({"validations": validations, "analysis": result}, f, indent=2)
        print(f"Results written to {args.output}")


if __name__ == "__main__":
    main()
